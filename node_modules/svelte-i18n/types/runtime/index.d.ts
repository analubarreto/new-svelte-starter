import type { MessageObject } from './types';
import { $locale } from './stores/locale';
import { init } from './configs';
import { registerLocaleLoader } from './includes/loaderQueue';
import { getLocaleFromHostname, getLocaleFromPathname, getLocaleFromNavigator, getLocaleFromQueryString, getLocaleFromHash } from './includes/localeGetters';
import { $dictionary, $locales, addMessages } from './stores/dictionary';
import { $isLoading } from './stores/loading';
import { $format, $formatDate, $formatNumber, $formatTime, $getJSON } from './stores/formatters';
import { getDateFormatter, getNumberFormatter, getTimeFormatter, getMessageFormatter } from './includes/formatters';
export declare function defineMessages(i: Record<string, MessageObject>): Record<string, MessageObject>;
export declare function waitLocale(locale?: string): Promise<void>;
export { init, addMessages, registerLocaleLoader as register, $locale as locale, $dictionary as dictionary, $locales as locales, $isLoading as isLoading, $format as format, $format as _, $format as t, $formatDate as date, $formatNumber as number, $formatTime as time, $getJSON as json, getDateFormatter, getNumberFormatter, getTimeFormatter, getMessageFormatter, getLocaleFromHostname, getLocaleFromPathname, getLocaleFromNavigator, getLocaleFromQueryString, getLocaleFromHash, };
